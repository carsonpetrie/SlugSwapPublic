import {Category, SubCategory} from './schema';

export async function dbGetCategory(): Promise<Category[]> {
  const res = await fetch('http://localhost:3013/api/v0/category');
  // Line below generated by ChatGPT
  const categories = await res.json() as Category[];
  // console.log(categories);
  return categories;
}

export async function dbCreateCategory(category_id: string): Promise<Category> {
  return new Promise((resolve, reject) => {
    const requestBody = { categoryid: category_id };
    fetch('http://localhost:3013/api/v0/category/create', {
      method: 'POST',
      body: JSON.stringify(requestBody),
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then((res) => {
        if (!res.ok) {
          throw res;
        }
        return res.json();
      })
      .then((data) => {
        resolve(data);
      })
      .catch((error) => {
        reject(error);
      });
  });
}

export async function dbDeleteCategory(category_id: string): Promise<Category> {
  return new Promise((resolve, reject) => {
    const requestBody = { categoryid: category_id };
    fetch('http://localhost:3013/api/v0/category/delete', {
      method: 'POST',
      body: JSON.stringify(requestBody),
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then((res) => {
        if (!res.ok) {
          throw res;
        }
        return res.json();
      })
      .then((data) => {
        resolve(data);
      })
      .catch((error) => {
        reject(error);
      });
  });
}

export async function dbEditCategory(category_id: string, new_id: string): Promise<Category> {
  return new Promise((resolve, reject) => {
    const requestBody = { categoryid: category_id, newid: new_id };
    fetch('http://localhost:3013/api/v0/category/edit', {
      method: 'POST',
      body: JSON.stringify(requestBody),
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then((res) => {
        if (!res.ok) {
          throw res;
        }
        return res.json();
      })
      .then((data) => {
        resolve(data);
      })
      .catch((error) => {
        reject(error);
      });
  });
}

export async function dbGetSubCategory(categoryid: string): Promise<SubCategory[]> {
  const res = await fetch('http://localhost:3013/api/v0/subcategory/'+categoryid);
  const subcategories = await res.json() as SubCategory[];
  return subcategories;
}

export async function dbCreateSubCategory(category_id: string, subcategory_id: string): Promise<SubCategory> {
  return new Promise((resolve, reject) => {
    const requestBody = { categoryid: category_id, subcategoryid: subcategory_id };
    fetch('http://localhost:3013/api/v0/subcategory/create', {
      method: 'POST',
      body: JSON.stringify(requestBody),
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then((res) => {
        if (!res.ok) {
          throw res;
        }
        return res.json();
      })
      .then((data) => {
        resolve(data);
      })
      .catch((error) => {
        reject(error);
      });
  });
}

export async function dbDeleteSubCategory(subcategory_id: string): Promise<SubCategory> {
  return new Promise((resolve, reject) => {
    const requestBody = { subcategoryid: subcategory_id };
    fetch('http://localhost:3013/api/v0/subcategory/delete', {
      method: 'POST',
      body: JSON.stringify(requestBody),
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then((res) => {
        if (!res.ok) {
          throw res;
        }
        return res.json();
      })
      .then((data) => {
        resolve(data);
      })
      .catch((error) => {
        reject(error);
      });
  });
}

export async function dbEditSubCategory(subcategory_id: string, new_id: string): Promise<SubCategory> {
  return new Promise((resolve, reject) => {
    const requestBody = { subcategoryid: subcategory_id, newid: new_id };
    fetch('http://localhost:3013/api/v0/subcategory/edit', {
      method: 'POST',
      body: JSON.stringify(requestBody),
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then((res) => {
        if (!res.ok) {
          throw res;
        }
        return res.json();
      })
      .then((data) => {
        resolve(data);
      })
      .catch((error) => {
        reject(error);
      });
  });
}