import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { graphql } from 'msw';
import { setupServer } from 'msw/node';
import 'whatwg-fetch';

import GuestMenu from '../../views/GuestMenu';

const handlers = [
  graphql.query('GetUser', async (req, res, ctx) => {
    const json = await req.json();
    if (json.query.indexOf('avatar') >= 0) {
      return res(
        ctx.data({
          GetUser: {
            "name": "Molly Member",
            "avatar": "https://i.imgur.com/a5GQflf.png",
            "roles": ["member"],
            "description": "wheezy outta here",
            "timestamp": "2021-05-12 20:00:00"
          }
        }),
      )
    } else if (json.query.indexOf('no-avatar') >= 0) {
      return res(
        ctx.data({
          GetUser: {
            "name": "Molly Member",
            "roles": ["member"],
            "description": "wheezy outta here",
            "timestamp": "2021-05-12 20:00:00"
          }
        }),
      )
    } else {
      return res(
        ctx.errors ([ {
          "message": "Unexpected error."
        }]),
      )
    }
  })
]

const server = setupServer(...handlers)

beforeAll(() => server.listen())
afterEach(() => server.resetHandlers())
afterAll(() => server.close())

jest.mock('next/router', ()=> ({
  push: jest.fn(),
  useRouter: () => ({
    query: {q: ''}
  })
}))

// Generated by Chat GPT to get rid of console warning for mocking
jest.mock('react-i18next', () => ({
  useTranslation: () => ({ t: key => key }),
}));

const renderView = async () => {
  render(<GuestMenu/>);
};

test('Sign Up', async () => {
  renderView();
  await waitFor(() => {
    screen.getByTestId('guestMenu');
    fireEvent.click(screen.getByTestId('guestMenu'));
  });
  await fireEvent.click(screen.getByText('menu.signup'));
});

test('Login', async () => {
  renderView();
  await waitFor(() => {
    screen.getByTestId('guestMenu');
    fireEvent.click(screen.getByTestId('guestMenu'));
  });
  await fireEvent.click(screen.getByText('menu.login'));
});