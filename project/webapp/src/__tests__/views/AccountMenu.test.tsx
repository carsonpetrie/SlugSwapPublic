/*
#######################################################################
#
# Copyright (C) 2022-2023 David C. Harrison. All right reserved.
#
# You may not use, distribute, publish, or modify this code without 
# the express written permission of the copyright holder.
#
#######################################################################
*/

import { UserSession } from '@/graphql/auth/schema';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { graphql } from 'msw';
import { setupServer } from 'msw/node';
import 'whatwg-fetch';

import AccountMenu from '../../views/AccountMenu';

import { UserContext } from '../../views/context';

const handlers = [
  graphql.query('GetUser', async (req, res, ctx) => {
    const json = await req.json();
    if (json.query.indexOf('avatar') >= 0) {
      return res(
        ctx.data({
          GetUser: {
            "name": "Molly Member",
            "avatar": "https://i.imgur.com/a5GQflf.png",
            "roles": ["member"],
            "description": "wheezy outta here",
            "timestamp": "2021-05-12 20:00:00"
          }
        }),
      )
    } else if (json.query.indexOf('no-avatar') >= 0) {
      return res(
        ctx.data({
          GetUser: {
            "name": "Molly Member",
            "roles": ["member"],
            "description": "wheezy outta here",
            "timestamp": "2021-05-12 20:00:00"
          }
        }),
      )
    } else {
      return res(
        ctx.errors ([ {
          "message": "Unexpected error."
        }]),
      )
    }
  })
]

const server = setupServer(...handlers)

beforeAll(() => server.listen())
afterEach(() => server.resetHandlers())
afterAll(() => server.close())

jest.mock('next/router', ()=> ({push: jest.fn()}))

// Generated by Chat GPT to get rid of console warning for mocking
jest.mock('react-i18next', () => ({
  useTranslation: () => ({ t: key => key }),
}));

const renderView = async () => {
  render(
    <UserContext.Provider value={
      {
        loginDetails: {name:"Molly Member",accessToken:"whatever", userid:"MOLLYUUID", roles:["member"]}, setLoginDetails: (_userID: UserSession|undefined) => {return;},
      }}
    >
      <AccountMenu/>
    </UserContext.Provider>);
};

test('Render No Avatar', async () => {
  localStorage.setItem('user', `{"name":"Molly Member","accessToken":"whatever","userid":"no-avatar","roles":["member"]}`)
  renderView()
  await screen.findByLabelText('Molly Member');
});

test('Logout Rendered on Signed In User', async () => {
  localStorage.setItem('user', `{"name":"Molly Member","accessToken":"whatever","userid":"avatar","roles":["member"]}`)
  renderView()
  await waitFor(() => {
    screen.getByTestId('Molly Member');
    fireEvent.click(screen.getByTestId('Molly Member'));
  });
  await screen.findByTestId('https://i.imgur.com/a5GQflf.png');
  await fireEvent.click(screen.getByText('menu.logout'));
});

test('Profile Interactable', async () => {
  localStorage.setItem('user', `{"name":"Molly Member","accessToken":"whatever","userid":"avatar","roles":["member"]}`)
  renderView();
  await waitFor(() => {
    screen.getByTestId('Molly Member');
    fireEvent.click(screen.getByTestId('Molly Member'));
  });
  await screen.findByText('menu.profile');
  fireEvent.click(screen.getByText('menu.profile'));
});