
import { render, screen } from '@testing-library/react'
import { graphql } from 'msw'
import { setupServer } from 'msw/node';
import mockRouter from 'next-router-mock';
import { createDynamicRouteParser } from "next-router-mock/dynamic-routes";

import 'whatwg-fetch'

import User from '../../pages/User/[userid]';
import { getServerSideProps } from '../../pages/User/[userid]';

const handlers = [
  graphql.query('GetUser', async (req, res, ctx) => {
    const json = await req.json();
    if (json.query.indexOf('TESTING') >= 0 || json.query.indexOf('NOLISTINGS') >= 0) {
      return res(
        ctx.data({
          GetUser: {
            "name": "Molly Member",
            "avatar": "https://i.imgur.com/a5GQflf.png",
            "roles": ["member"],
            "description": "wheezy outta here",
            "timestamp": "2021-05-12 20:00:00"
          }
        }),
      )
    } else {
      return res(
        ctx.errors ([ {
          "message": "Unexpected error."
        }]),
      )
    }
  }),
  graphql.query('GetListingsByPoster', async (req, res, ctx) => {
    const json = await req.json();
    if (json.query.indexOf('TESTING') >= 0) {
      return res(
        ctx.data({
          GetListingsByPoster: [
            {
              "listingid": "052880e4-adc3-46b8-bc62-43b373cf93f4",
              "posterid": "0874daf0-5b0d-4c91-be85-1b88acd226d6",
              "categoryid": "Vehicles",
              "data": {
                "title": "Car",
                "imgs": "https://i.imgur.com/X73z6UW.jpeg",
                "description": "Description",
                "price": 5000
              }
            },
          ]
        }),
      )
    } else if (json.query.indexOf('NOLISTINGS') >= 0) {
      return res(
        ctx.data({
          GetListingsByPoster: []
        }),
      )
    } else {
      return res(
        ctx.errors ([ {
          "message": "Unexpected error."
        }]),
      )
    }
  })
]

jest.mock('next/router', () => require('next-router-mock'));
mockRouter.useParser(createDynamicRouteParser([
  // These paths should match those found in the `/pages` folder:
  "/User/[userid]",
]));

// Generated by Chat GPT to get rid of console warning for mocking
jest.mock('react-i18next', () => ({
  useTranslation: () => ({ t: key => key }),
}));

const server = setupServer(...handlers);

beforeAll(() => server.listen())
afterEach(() => server.resetHandlers())
afterAll(() => server.close())

const renderView = () => {
  render(<User/>);
};

test('User Page Loads', async () => {
  await getServerSideProps({req: { headers: { host: 'localhost:3000'}}});
  mockRouter.push('/User/TESTING');
  renderView();
  await screen.findByText('Molly Member');  
});

test('404 Invalid Query Paramter for UserID', async () => {
  mockRouter.push('/User/ERROR');
  renderView();
  await screen.findByText('404');
});

test('Listing Displays', async () => {
  mockRouter.push('/User/TESTING');
  renderView();
  await screen.findByText('Car');
});

test('Listing Displays', async () => {
  mockRouter.push('/User/NOLISTINGS');
  renderView();
  await screen.findByText('This User Currently Has No Listings');
});

/*
test('Click Home', async () => {
  mockRouter.push('/Listing/TESTING');
  renderView()
  await screen.findByText('2017 Honda Civic')
  fireEvent.click(screen.getByRole('button',
    {name:'Home'}
  ))
  expect(mockRouter).toMatchObject({
    pathname: '/',
  });
});
*/
