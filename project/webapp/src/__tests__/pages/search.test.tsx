import SearchPage from '../../pages/search';
import { fireEvent, render, screen } from '@testing-library/react'
import { graphql } from 'msw'
import { setupServer } from 'msw/node';
import mockRouter from 'next-router-mock';
import { CategoryContext, SearchContext, } from '../../views/context';

import 'whatwg-fetch'

import { getServerSideProps } from '../../pages/search/index';

jest.setTimeout(15000);

const handlers = [
  graphql.query('GetListings', async (req, res, ctx) => {
    return res(
      ctx.data({
        GetListings: [
          {
            "listingid": "052880e4-adc3-46b8-bc62-43b373cf93f4",
            "categoryid": "Vehicles",
            "posterid": "0874daf0-5b0d-4c91-be85-1b88acd226d6",
            "data": {
              "title": "2017 Honda Civic",
              "description": "Works on dowhills",
              "price": 10000,
              "imgs": [
                "https://i.imgur.com/X73z6UW.jpeg"
              ]
            }
          },
        ]
      }),
    )
  }),
  graphql.query('GetCategories', async (req, res, ctx) => {
    return res(
      ctx.data({
        GetCategories: [
          {
            "categoryid": "Vehicles"
          },
          {
            "categoryid": "Furniture"
          },
          {
            "categoryid": "Clothes"
          }
        ]
      }),
    )
  }),
  graphql.query('GetSubCategories', async (req, res, ctx) => {
    return res(
      ctx.data({
        GetSubCategories: [
          {
            "subcategoryid": "Hondas & Trucks"
          },
          {
            "subcategoryid": "Motorcycles"
          },
          {
            "subcategoryid": "Campers & RVs"
          }
        ]
      }),
    )
  }),
  graphql.query('GetAttributes', async (req, res, ctx) => {
    const json = await req.json()
    if (json.query.indexOf('Cars & Trucks') >= 0) {
      return res(
        ctx.data({
          GetAttributes: 
            {
              attributes: '{"ATTRIBUTES": [{"name": "Make", "type": "ENUM", "contents": ["Audi", "BMW", "Bugatti", "Cadillac", "Dodge", "Ford", "Honda", "Hyundai", "Jaguar", "Jeep", "Kia", "Nissan", "Subaru", "Toyota", "Tesla"]}, {"name": "Transmission", "type": "ENUM", "contents": ["Automatic", "Manual"]}, {"name": "Color", "type": "ENUM", "contents": ["Red", "Orange", "Yellow", "Green", "Blue", "Purple", "Pink", "Brown", "Grey", "Black", "White"]}]}'
            }
        }),
      )
    } else {
      return res(
        ctx.data({
          GetAttributes: 
            {
              attributes: 'null'
            }
        }),
      )
    }
  }),
]

jest.mock('next/router', () => require('next-router-mock'));
const server = setupServer(...handlers);

// Generated by Chat GPT to get rid of console warning for mocking
jest.mock('react-i18next', () => ({
  useTranslation: () => ({ t: key => key }),
}));

beforeAll(() => server.listen())
afterEach(() => server.resetHandlers())
afterAll(() => server.close())

const renderView = () => {
  mockRouter.push({pathname: '/search', query: {q: 'Honda', category: 'All'}});
  render(
    <SearchContext.Provider value={{
      currentSearch: 'Honda', setCurrentSearch: (_search: string|undefined) => {return;}
    }}>
      <CategoryContext.Provider value={{
        currentCategory: 'All', setCurrentCategory: (_category: string) => {return;}
      }}>
        <SearchPage />
      </CategoryContext.Provider>
    </SearchContext.Provider>
  )
};

test('Listing Title Loads', async () => {
  await getServerSideProps({req: { headers: { host: 'localhost:3000/'}}})
  renderView()
  await screen.findByText('2017 Honda Civic')
});

test('Search by All Categories', async () => {
  mockRouter.push({pathname: '/search', query: {category: 'All'}});
  render(<SearchPage />)
  await screen.findByText('2017 Honda Civic')
  fireEvent.click(screen.getByText(`Vehicles`))
});

test('Search by Title', async () => {
  mockRouter.push({pathname: '/search', query: {q: 'Honda'}});
  render(<SearchPage />)
  await screen.findByText('2017 Honda Civic')
  fireEvent.click(screen.getByText(`Vehicles`))
});

test('Search by Title, Category, and Subcategory', async () => {
  mockRouter.push({pathname: '/search', query: {q: 'Honda', category: 'Vehicles', subcategory: 'Cars & Trucks'}});
  render(<SearchPage />)
  await screen.findByText('2017 Honda Civic')
  fireEvent.click(screen.getByText(`Vehicles`))
});

test('Search by Title, Category, Subcategory, and Attributes', async () => {
  mockRouter.push({pathname: '/search', query: {q: 'Honda', category: 'Vehicles', subcategory: 'Cars & Trucks', Transmission: ['TRUE', 'Automatic']}});
  render(<SearchPage />)
  await screen.findByText('2017 Honda Civic')
  fireEvent.click(screen.getByText(`Vehicles`))
});

test('Search For Null Attributes', async () => {
  mockRouter.push({pathname: '/search', query: {q: 'Honda', category: 'Vehicles', subcategory: 'Motorcycles'}});
  render(<SearchPage />)
  await screen.findByText('2017 Honda Civic')
  fireEvent.click(screen.getByText(`Vehicles`))
});

test('Click on All Categories', async () => {
  renderView()
  await screen.findByText('All')
  fireEvent.click(screen.getByText(`All`));
});

test('Click on Vehicle Categories', async () => { 
  renderView()
  await screen.findByText('Vehicles');
  fireEvent.click(screen.getByText(`Vehicles`));
});