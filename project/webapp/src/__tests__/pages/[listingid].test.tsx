
import { render, screen, waitFor } from '@testing-library/react'
import { graphql } from 'msw'
import { setupServer } from 'msw/node';
import mockRouter from 'next-router-mock';
import { createDynamicRouteParser } from "next-router-mock/dynamic-routes";

import { UserContext } from '../../views/context'
import { UserSession } from '../../graphql/auth/schema';

import 'whatwg-fetch'

import Listing from '../../pages/Listing/[listingid]';
import { getServerSideProps } from '../../pages/Listing/[listingid]';

const handlers = [
  graphql.query('GetListing', async (req, res, ctx) => {
    const json = await req.json()
    if (json.query.indexOf('TESTING') >= 0) {
      return res(
        ctx.data({
          GetListing: {
            "listingid": "052880e4-adc3-46b8-bc62-43b373cf93f4",
            "categoryid": "Vehicles",
            "posterid": "0874daf0-5b0d-4c91-be85-1b88acd226d6",
            "data": {
              "title": "2017 Honda Civic",
              "description": "Works on dowhills",
              "dateCreated": new Date().toISOString(),
              "price": 10000,
              "imgs": [
                "WHATEVER"
              ],
              "pending": 'false'
            }
          }
        }),
      )
    } else if (json.query.indexOf('NOIMG') >= 0) {
      return res(
        ctx.data({
          GetListing: {
            "listingid": "052880e4-adc3-46b8-bc62-43b373cf93f4",
            "categoryid": "Vehicles",
            "posterid": "0874daf0-5b0d-4c91-be85-1b88acd226d6",
            "data": {
              "title": "2017 Honda Civic",
              "description": "Works on dowhills",
              "dateCreated": new Date().toISOString(),
              "price": 10000,
              "imgs": [],
              "pending": 'false'
            }
          }
        }),
      )
    } else if (json.query.indexOf('PENDING') >= 0) {
      return res(
        ctx.data({
          GetListing: {
            "listingid": "052880e4-adc3-46b8-bc62-43b373cf93f4",
            "categoryid": "Vehicles",
            "posterid": "0874daf0-5b0d-4c91-be85-1b88acd226d6",
            "data": {
              "title": "Pending",
              "description": "Works on dowhills",
              "dateCreated": new Date().toISOString(),
              "price": 10000,
              "imgs": [],
              "pending": 'true',
            }
          }
        }),
      )
    } else {
      return res(
        ctx.errors ([ {
          "message": "Unexpected error."
        }]),
      )
    }
  }),
  graphql.query('GetUser', async (req, res, ctx) => {
    return res(
      ctx.data({
        GetUser: {
          "name": "Maxwell Moderator",
          "avatar": "https://i.imgur.com/a5GQflf.png",
          "roles": ["member", "moderator"],
          "description": "wheezy outta here",
          "timestamp": "2021-05-12 20:00:00"
        }
      }),
    )
  }
  )
]

jest.mock('next/router', () => require('next-router-mock'));
mockRouter.useParser(createDynamicRouteParser([
  // These paths should match those found in the `/pages` folder:
  "/Listing/[listingid]",
]));

// Generated by Chat GPT to get rid of console warning for mocking
jest.mock('react-i18next', () => ({
  useTranslation: () => ({ t: key => key }),
}));

const server = setupServer(...handlers);

beforeAll(() => server.listen())
afterEach(() => server.resetHandlers())
afterAll(() => server.close())

const renderView = () => {
  render(<Listing/>)
};

test('Listing Title Loads', async () => {
  await getServerSideProps({req: { headers: { host: 'localhost:3000'}}});
  mockRouter.push('/Listing/TESTING');
  renderView()
});

test('Listing Loads NO IMG', async () => {
  mockRouter.push('/Listing/NOIMG');
  renderView()
  await screen.findByText('2017 Honda Civic')
});


test('Pending Listing Blurred MEMBER', async () => {
  mockRouter.push('/Listing/PENDING');
  render(
    <UserContext.Provider value={{
      loginDetails: {name:"Molly Member",accessToken:"test", userid:"MOLLYUUID", roles:["member"]}, setLoginDetails: (_session: UserSession|undefined) => {return;},
    }}>
      <Listing/>
    </UserContext.Provider>
  )
  await waitFor(() => screen.findByText('Uh Oh...')) 
});


test('Pending Listing Viewable MODERATOR', async () => {
  mockRouter.push('/Listing/PENDING');
  render (
    <UserContext.Provider value={{
      loginDetails: {name:"Max Moderator",accessToken:"test", userid:"MAXUUID", roles:["member", "moderator"]}, setLoginDetails: (_session: UserSession|undefined) => {return;},
    }}>
      <Listing/>
    </UserContext.Provider>
  )
  await screen.findByText('Pending')
});

test('404 Invalid Query Paramter for ListingID', async () => {
  mockRouter.push('/Listing/ERROR');
  renderView()
  await screen.findByText('404');
});
