// Modified from: https://github.com/mui/material-ui/blob/v5.11.9/docs/data/material/components/app-bar/ResponsiveAppBar.tsx
// Dialog code modified from https://mui.com/material-ui/react-dialog/
import {
  Button,
  Toolbar,
  Stack,
  useTheme,
  Grid,
} from '@mui/material';


import { Category } from '../graphql/categories/schema';
import { useContext } from "react";
import { CategoryContext, SearchContext } from './context';
import Router from 'next/router';
type StatProps = {
  categories: Category[],
}

import { useTranslation } from 'next-i18next'
import CreateListing from './Listings/CreateListing';
import { Box } from '@mui/system';


export default function CategoryBar({categories} : StatProps) {
  const { t } = useTranslation('categories');

  const categoryCtx = useContext(CategoryContext);
  const theme = useTheme();
  const searchCtx = useContext(SearchContext);
  return (
    <Grid>
      <Toolbar
        sx={{ backgroundColor: theme.palette.primary.light }}
      >
        <div style={{overflow: 'auto', display: 'flex', alignItems: 'center'}}>
          <Stack spacing={2} direction="row" sx={{marginLeft: "auto"}}>
            <Button
              aria-label='All'
              onClick={() => {
                categoryCtx?.setCurrentCategory('All');
                if (searchCtx?.currentSearch) {
                  Router.push({
                    pathname: `/search`,
                    query: {
                      q: searchCtx.currentSearch,
                      category: 'All'
                    }
                  })
                } else {
                  Router.push({
                    pathname: `/search`,
                    query: {
                      category: 'All'
                    }
                  })
                }
              }}
              variant="contained"
              color="secondary"
              sx={{ 
                width:'150px',
                marginRight: 1,
                color: '#000',
                display: 'block', 
                // Hover color code generated by Chat GPT
                '&:hover': {
                  backgroundColor: theme.palette.secondary.light,
                  color: '#fff'
                },
              }}
            >
              {t('All')}
            </Button>
            {categories && categories.map((category) => (
              <Button
                key={category.categoryid}
                aria-label={category.categoryid}
                onClick={() => {
                  categoryCtx?.setCurrentCategory(category.categoryid);
                  if (searchCtx?.currentSearch) {
                    Router.push({
                      pathname: `/search`,
                      query: {
                        q: searchCtx.currentSearch,
                        category: category.categoryid,
                      }
                    })
                  } else {
                    Router.push({
                      pathname: `/search`,
                      query: {
                        category: category.categoryid
                        
                      }
                    })
                  }
                }}
                variant="contained"
                color="secondary"
                sx={{
                  marginRight: 1,
                  color: '#000',
                  display: 'block', 
                  // Hover color code generated by Chat GPT
                  '&:hover': {
                    backgroundColor: theme.palette.secondary.light,
                    color: '#fff'
                  },
                }}
              >
                {t(category.categoryid)}
              </Button>
            ))}
          </Stack>
        </div>
        <Box sx={{ml: 'auto', pl: 2}}>
          <CreateListing/>
        </Box>
      </Toolbar>
    </Grid>
  )
}
